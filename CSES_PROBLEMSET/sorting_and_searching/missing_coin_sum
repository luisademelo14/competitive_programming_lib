#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
typedef vector<ll> vll;

#define endl '\n'
#define pb push_back
#define all(c) (c).begin(), (c).end()

const ll MAX_N = 1000000007;
 
// ideia do problema: achar o menor inteiro positivo que nao pode
// ser representado como a soma de qualquer subset que pertence a
// um dado array
 
// estrategia para resolver usando programacao dinamica: comecar 
// ordenando o array e adotar que a variavel "ans" vai guardar a
// resposta final (comeca com 1)
 
// percorrendo o array de a[0] ate a[n-1], temos duas possibilidades
// na transicao da dp:
// 1) se a[i] eh maior que "ans" -> achamos a resposta, ja que todos os elementos
// que vem depois de a[i] tambem serao maiores que "ans" (nao conseguimos chegar em
// "ans" a partir de qualquer subset)
// 2) se a[i] nao eh maior que "ans" -> fazemos ans += a[i]
 
// explicacao do segundo item da transicao (pq funciona): de os elementos de 0 ate 
// i-1 conseguem representar de 1 ate ans-1, temos que elementos de 0 ate i conseguem
// representar de 1 ate ans+a[i]-1, se adicionarmos a[i] a todos os subsets que 
// representam de 1 ate ans-1
 
// complexidade da solucao: O(n log(n))
 
void solve(){
    int n;
    cin >> n;
 
    vll a (n);
 
    for(int i=0; i<n; i++)
        cin >> a[i];
 
    sort(all(a));
 
    ll ans = 1;
 
    for(int i=0; i<n; i++){
        if(ans<a[i]){
            cout << ans << endl;
            return;
        }
        else
            ans += a[i];
    }
 
    cout << ans << endl;
}
 
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    solve();
    return 0;
}